{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["allowedCharacters","characters","inputType","onChange","inputsRef","useRef","useEffect","sendResult","res","input","handleOnChange","e","handleOnKeyDown","key","target","handleOnFocus","handleOnPaste","value","i","inputs","onKeyDown","onFocus","onPaste","type","ref","el","maxLength","className","inputClassName","inputMode","autoComplete","ariaLabel","pattern","containerClassName","App","useState","result","setResult","alt","src","href","placeholder","data-ribbon","title","rel","ReactDOM","render","document","getElementById"],"mappings":"kOAqBkC,SAAC,GAAD,QAChCA,yBADgC,MAAC,eAAD,EAAC,EAAD,EAAC,UAAD,IAGhCC,kBAHgC,MAAC,EAAD,EAAC,EAAD,EAAC,qBAAD,EAAC,iBAAD,EAAC,UAAD,IAOhCC,iBAPgC,MAAC,OAAD,EAQhCC,EARgC,EAQhCA,SAEMC,EAAYC,iBAAlB,IAEAC,qBAAU,WACRF,uBADFE,IAuDA,IAnDA,IAAMC,EAAa,WACjB,IAAMC,EAAMJ,eAAuBK,YAAD,OAAWA,EAAjCL,cAAZ,IACAD,GAAYA,EAAZA,IAGIO,EAAkBC,YAClBA,qBAAJ,GACE,OAAIA,6BACDA,oCAGHA,kBAEFJ,KAGIK,EAAmBD,YAAD,IACdE,EAAR,EAAQA,IACFC,EAASH,EAAf,OACA,cAAIE,IACEC,cAAJ,OAA2BA,yBACzB,OAAIA,2BACDA,iCACDH,oBAGFG,WAEFP,MAIEQ,EAAiBJ,YACrBA,mBAGIK,EAAiBL,YACrB,IAAMM,EAAQN,wBAAd,QACA,GAAIM,QAAJ,GAAoC,CAClC,IAAK,IAAIC,EAAT,EAAgBA,KAAkBA,EAAID,EAAtC,OAAoDC,IAClDd,mBAA6Ba,SAA7Bb,GACA,OAAIA,iCACDA,wCAGLG,IAEFI,oBAGIQ,EAAN,GAlEgC,WAmEvBD,GACPC,OACE,2BACEN,IAAKK,EACLf,SAAUO,EACVU,UAAWR,EACXS,QAASN,EACTO,QAASN,EACTO,KAAMrB,EACNsB,IAAMC,YAAD,OAA2BrB,aAAuBqB,GACvDC,UAAW,EACXC,UAAWC,EACXC,UAAWA,EACXC,aAAa,oB,aAEXC,EAAY,GAAH,OAAMA,EAAN,uBAA8Bb,EAA9B,uBAAqDA,EAAI,GAEpEc,QAAQ,aAjBLd,EAAT,EAAgBA,EAAhB,EAAgCA,IAAK,EAA5BA,GAsBT,OAAO,yBAAKS,UAAWM,GAAvB,ICqDaC,EA9JH,WAAO,IAAD,EACYC,mBAAiB,IAD7B,mBACTC,EADS,KACDC,EADC,KAKhB,OACE,yBAAKV,UAAU,QACb,qDACA,yBAAKA,UAAU,UACb,yBACEW,IAAI,GACJC,IAAI,2DAEN,yBACED,IAAI,sBACJC,IAAI,qEAEN,yBACED,IAAI,cACJC,IAAI,6DAEN,yBACED,IAAI,GACJC,IAAI,4DAEN,yBACED,IAAI,GACJC,IAAI,6DAGR,2BACE,uBAAGC,KAAK,mDAAR,iCAIF,2BAAOjB,KAAK,OAAOkB,YAAY,MAAMf,UAAW,IAChD,uCACA,oEAEE,6BACA,6BAHF,4CAKE,6BACA,6BANF,wJAWA,kBAAC,EAAD,CAAUvB,SA9CS,SAACK,GACtB6B,EAAU7B,MA8CP4B,GAAU,sCAAYA,GACvB,yZAkBA,6CACA,8EACmD,IACjD,iDAFF,QAEgC,6CAFhC,gBAIA,kBAAC,EAAD,CACEpC,kBAAkB,WAClBG,SAAU,kBAAM,MAChBF,WAAY,EACZgC,mBAAmB,YACnBL,eAAe,UAEjB,wCACA,8RAeA,yCACA,iRAkBA,2CACA,6CACiB,sCADjB,KACiC,mCADjC,OACgD,uCADhD,oCAIA,kBAAC,EAAD,CACEzB,SAAU,kBAAM,MAChBF,WAAY,EACZC,UAAU,WACV+B,mBAAmB,YACnBL,eAAe,UAEjB,wCACA,wTAgBA,uBACED,UAAU,qBACVa,KAAK,kDACLE,cAAY,oBACZC,MAAM,oBACN7B,OAAO,SACP8B,IAAI,uBANN,uBC/INC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.674f8a03.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\ntype Props = {\n  allowedCharacters?: string;\n  ariaLabel?: string;\n  characters?: number;\n  containerClassName?: string;\n  inputClassName?: string;\n  inputMode?:\n    | 'none'\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search';\n  inputType?: 'number' | 'password' | 'text';\n  onChange: (res: string) => void;\n};\n\nconst AuthCode: React.FC<Props> = ({\n  allowedCharacters = '[A-Za-z0-9]*',\n  ariaLabel,\n  characters = 6,\n  containerClassName,\n  inputClassName,\n  inputMode,\n  inputType = 'text',\n  onChange\n}) => {\n  const inputsRef = useRef<Array<HTMLInputElement>>([]);\n\n  useEffect(() => {\n    inputsRef.current[0].focus();\n  }, []);\n\n  const sendResult = () => {\n    const res = inputsRef.current.map((input) => input.value).join('');\n    onChange && onChange(res);\n  };\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.match(allowedCharacters)) {\n      if (e.target.nextElementSibling !== null) {\n        (e.target.nextElementSibling as HTMLInputElement).focus();\n      }\n    } else {\n      e.target.value = '';\n    }\n    sendResult();\n  };\n\n  const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const { key } = e;\n    const target = e.target as HTMLInputElement;\n    if (key === 'Backspace') {\n      if (target.value === '' && target.previousElementSibling !== null) {\n        if (target.previousElementSibling !== null) {\n          (target.previousElementSibling as HTMLInputElement).focus();\n          e.preventDefault();\n        }\n      } else {\n        target.value = '';\n      }\n      sendResult();\n    }\n  };\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select();\n  };\n\n  const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    const value = e.clipboardData.getData('Text');\n    if (value.match(allowedCharacters)) {\n      for (let i = 0; i < characters && i < value.length; i++) {\n        inputsRef.current[i].value = value.charAt(i);\n        if (inputsRef.current[i].nextElementSibling !== null) {\n          (inputsRef.current[i].nextElementSibling as HTMLInputElement).focus();\n        }\n      }\n      sendResult();\n    }\n    e.preventDefault();\n  };\n\n  const inputs = [];\n  for (let i = 0; i < characters; i++) {\n    inputs.push(\n      <input\n        key={i}\n        onChange={handleOnChange}\n        onKeyDown={handleOnKeyDown}\n        onFocus={handleOnFocus}\n        onPaste={handleOnPaste}\n        type={inputType}\n        ref={(el: HTMLInputElement) => (inputsRef.current[i] = el)}\n        maxLength={1}\n        className={inputClassName}\n        inputMode={inputMode}\n        autoComplete='one-time-password'\n        aria-label={\n          ariaLabel ? `${ariaLabel}. Character ${i + 1}` : `Character ${i + 1}`\n        }\n        pattern='[0-9]*'\n      />\n    );\n  }\n\n  return <div className={containerClassName}>{inputs}</div>;\n};\n\nexport default AuthCode;\n","import React, { useState } from 'react';\n\nimport AuthCode from 'react-auth-code-input';\nimport './index.css';\n\nconst App = () => {\n  const [result, setResult] = useState<string>('');\n  const handleOnChange = (res: string) => {\n    setResult(res);\n  };\n  return (\n    <div className='main'>\n      <h1>React Auth Code Input</h1>\n      <div className='badges'>\n        <img\n          alt=''\n          src='https://img.shields.io/npm/v/react-auth-code-input.svg'\n        />\n        <img\n          alt='code style standard'\n          src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n        />\n        <img\n          alt='license MIT'\n          src='https://img.shields.io/badge/license-MIT-brightgreen.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dt/react-auth-code-input.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dw/react-auth-code-input.svg'\n        />\n      </div>\n      <p>\n        <a href='https://github.com/drac94/react-auth-code-input'>\n          View documentation on GitHub\n        </a>\n      </p>\n      <input type='text' placeholder='111' maxLength={2} />\n      <h2>Default</h2>\n      <p>\n        Try it out by writing some characters.\n        <br />\n        <br />\n        Delete and move back using the backspace.\n        <br />\n        <br />\n        You can also paste text as long as it matches the allowed characters\n        defined in the Regular Expression (By default accepts alphanumeric\n        characters).\n      </p>\n      <AuthCode onChange={handleOnChange} />\n      {result && <p>Result: {result}</p>}\n      <code>\n        {`\nimport React, { useState } from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  const [result, setResult] = useState<string>('');\n  const handleOnChange = (res: string) => {\n    setResult(res);\n  };\n  return (\n    <div>\n      <AuthCode onChange={handleOnChange} />\n      {result && <p>Result: {result}</p>}\n    </div>\n  );\n        `}\n      </code>\n      <h2>Custom Styles</h2>\n      <p>\n        Customize the look by passing CSS classes to the{' '}\n        <i>containerClassName</i> and <i>inputClassName</i> properties.\n      </p>\n      <AuthCode\n        allowedCharacters='^[0-9]*$'\n        onChange={() => null}\n        characters={5}\n        containerClassName='container'\n        inputClassName='input'\n      />\n      <p>index.tsx</p>\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  return (<AuthCode\n    characters={5}\n    containerClassName='container'\n    inputClassName='input'\n    onChange={handleOnChange}\n  />)\n}\n        `}\n      </code>\n      <p>styles.css</p>\n      <code>\n        {`\n.container {\n  padding: 16px;\n}\n\n.input {\n  width: 2ch;\n  padding: 8px;\n  border-radius: 8px;\n  font-size: 40px;\n  text-align: center;\n  margin-right: 12px;\n  border: 1px solid white;\n  text-transform: uppercase;\n}\n        `}\n      </code>\n      <h2>Input Types</h2>\n      <p>\n        Choose between <b>numeric</b>, <b>text</b> or <b>password</b> input\n        types (Defaults to text).\n      </p>\n      <AuthCode\n        onChange={() => null}\n        characters={5}\n        inputType='password'\n        containerClassName='container'\n        inputClassName='input'\n      />\n      <p>index.tsx</p>\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  return (<AuthCode\n    characters={5}\n    inputType='password'\n    containerClassName='container'\n    inputClassName='input'\n    onChange={handleOnChange}\n  />)\n}\n        `}\n      </code>\n      <a\n        className='github-fork-ribbon'\n        href='https://github.com/drac94/react-auth-code-input'\n        data-ribbon='Fork me on GitHub'\n        title='Fork me on GitHub'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        Fork me on GitHub\n      </a>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}