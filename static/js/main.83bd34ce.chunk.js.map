{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["allowedCharactersValues","propsMap","alpha","type","inputMode","pattern","alphanumeric","numeric","min","max","forwardRef","allowedCharacters","autoFocus","length","isPassword","onChange","isNaN","Error","value","inputsRef","useRef","inputProps","useImperativeHandle","ref","focus","clear","i","sendResult","useEffect","res","input","handleOnChange","e","target","nextElementSibling","handleOnKeyDown","key","handleOnFocus","handleOnPaste","pastedValue","currentInput","pastedCharacter","currentValue","inputs","onKeyDown","onFocus","onPaste","el","maxLength","className","inputClassName","autoComplete","ariaLabel","containerClassName","App","AuthInputRef","useState","result","setResult","alt","src","href","onClick","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83bd34ce.chunk.js","sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\n\nconst allowedCharactersValues = ['alpha', 'numeric', 'alphanumeric'] as const;\n\ntype Props = {\n  allowedCharacters?: typeof allowedCharactersValues[number];\n  ariaLabel?: string;\n  autoFocus?: boolean;\n  length?: number;\n  containerClassName?: string;\n  inputClassName?: string;\n  isPassword?: boolean;\n  onChange: (res: string) => void;\n};\n\ntype InputMode = 'text' | 'numeric';\n\ntype InputType = 'text' | 'number' | 'password';\n\ntype InputProps = {\n  type: InputType;\n  inputMode: InputMode;\n  pattern: string;\n  min?: string;\n  max?: string;\n};\n\nexport type AuthCodeRef = {\n  focus: () => void;\n  clear: () => void;\n};\n\nconst propsMap: { [key: string]: InputProps } = {\n  alpha: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z]{1}'\n  },\n\n  alphanumeric: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z0-9]{1}'\n  },\n\n  numeric: {\n    type: 'number',\n    inputMode: 'numeric',\n    pattern: '[0-9]{1}',\n    min: '0',\n    max: '9'\n  }\n};\n\nconst AuthCode = forwardRef<AuthCodeRef, Props>(\n  (\n    {\n      allowedCharacters = 'alphanumeric',\n      ariaLabel,\n      autoFocus = true,\n      length = 6,\n      containerClassName,\n      inputClassName,\n      isPassword = false,\n      onChange\n    },\n    ref\n  ) => {\n    if (isNaN(length) || length < 1) {\n      throw new Error('Length should be a number and greater than 0');\n    }\n\n    if (!allowedCharactersValues.some((value) => value === allowedCharacters)) {\n      throw new Error(\n        'Invalid value for allowedCharacters. Use alpha, numeric, or alphanumeric'\n      );\n    }\n\n    const inputsRef = useRef<Array<HTMLInputElement>>([]);\n    const inputProps = propsMap[allowedCharacters];\n\n    useImperativeHandle(ref, () => ({\n      focus: () => {\n        if (inputsRef.current) {\n          inputsRef.current[0].focus();\n        }\n      },\n      clear: () => {\n        if (inputsRef.current) {\n          for (let i = 0; i < inputsRef.current.length; i++) {\n            inputsRef.current[i].value = '';\n          }\n          inputsRef.current[0].focus();\n        }\n        sendResult();\n      }\n    }));\n\n    useEffect(() => {\n      if (autoFocus) {\n        inputsRef.current[0].focus();\n      }\n    }, []);\n\n    const sendResult = () => {\n      const res = inputsRef.current.map((input) => input.value).join('');\n      onChange && onChange(res);\n    };\n\n    const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {\n        target: { value, nextElementSibling }\n      } = e;\n      if (value.length > 1) {\n        e.target.value = value.charAt(0);\n        if (nextElementSibling !== null) {\n          (nextElementSibling as HTMLInputElement).focus();\n        }\n      } else {\n        if (value.match(inputProps.pattern)) {\n          if (nextElementSibling !== null) {\n            (nextElementSibling as HTMLInputElement).focus();\n          }\n        } else {\n          e.target.value = '';\n        }\n      }\n      sendResult();\n    };\n\n    const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = e;\n      const target = e.target as HTMLInputElement;\n      if (key === 'Backspace') {\n        if (target.value === '' && target.previousElementSibling !== null) {\n          if (target.previousElementSibling !== null) {\n            (target.previousElementSibling as HTMLInputElement).focus();\n            e.preventDefault();\n          }\n        } else {\n          target.value = '';\n        }\n        sendResult();\n      }\n    };\n\n    const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n      e.target.select();\n    };\n\n    const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n      const pastedValue = e.clipboardData.getData('Text');\n\n      let currentInput = 0;\n\n      for (let i = 0; i < pastedValue.length; i++) {\n        const pastedCharacter = pastedValue.charAt(i);\n        const currentValue = inputsRef.current[currentInput].value;\n        if (pastedCharacter.match(inputProps.pattern)) {\n          if (!currentValue) {\n            inputsRef.current[currentInput].value = pastedCharacter;\n            if (inputsRef.current[currentInput].nextElementSibling !== null) {\n              (inputsRef.current[currentInput]\n                .nextElementSibling as HTMLInputElement).focus();\n              currentInput++;\n            }\n          }\n        }\n      }\n      sendResult();\n\n      e.preventDefault();\n    };\n\n    const inputs = [];\n    for (let i = 0; i < length; i++) {\n      inputs.push(\n        <input\n          key={i}\n          onChange={handleOnChange}\n          onKeyDown={handleOnKeyDown}\n          onFocus={handleOnFocus}\n          onPaste={handleOnPaste}\n          {...inputProps}\n          type={isPassword ? 'password' : inputProps.type}\n          ref={(el: HTMLInputElement) => {\n            inputsRef.current[i] = el;\n          }}\n          maxLength={1}\n          className={inputClassName}\n          autoComplete={i === 0 ? 'one-time-code' : 'off'}\n          aria-label={\n            ariaLabel\n              ? `${ariaLabel}. Character ${i + 1}.`\n              : `Character ${i + 1}.`\n          }\n        />\n      );\n    }\n\n    return <div className={containerClassName}>{inputs}</div>;\n  }\n);\n\nexport default AuthCode;\n","import React, { useRef, useState } from 'react';\n\nimport AuthCode, { AuthCodeRef } from 'react-auth-code-input';\nimport './index.css';\n\nconst App = () => {\n  const AuthInputRef = useRef<AuthCodeRef>(null);\n  const [result, setResult] = useState<string>('');\n  const handleOnChange = (res: string) => {\n    setResult(res);\n  };\n\n  return (\n    <div className='main'>\n      <h1>React Auth Code Input</h1>\n      <p>One-time password (OTP) React component.</p>\n      <div className='badges'>\n        <img\n          alt=''\n          src='https://img.shields.io/npm/v/react-auth-code-input.svg'\n        />\n        <img\n          alt='code style standard'\n          src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n        />\n        <img\n          alt='license MIT'\n          src='https://img.shields.io/badge/license-MIT-brightgreen.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dt/react-auth-code-input.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dw/react-auth-code-input.svg'\n        />\n      </div>\n      <p>\n        <a href='https://github.com/drac94/react-auth-code-input'>\n          View documentation on GitHub\n        </a>\n      </p>\n      <div>\n        <div>\n          <AuthCode\n            ref={AuthInputRef}\n            onChange={handleOnChange}\n            containerClassName='container'\n            inputClassName='input'\n          />\n\n          <p>Result: {result}</p>\n          <button onClick={() => AuthInputRef.current?.focus()}>Focus</button>\n          <button onClick={() => AuthInputRef.current?.clear()}>Clear</button>\n        </div>\n        <code>\n          {`\nimport React, { useRef, useState } from 'react';\nimport AuthCode, { AuthCodeRef } from 'react-auth-code-input';\n\nconst App = () => {\n  const AuthInputRef = useRef<AuthCodeRef>(null);\n  const [result, setResult] = useState<string>('');\n  const handleOnChange = (res: string) => {\n    setResult(res);\n  };\n  return (\n    <div>\n      <AuthCode\n        ref={AuthInputRef}\n        onChange={handleOnChange}\n        containerClassName='container'\n        inputClassName='input'\n      />\n\n      <p>Result: {result}</p>\n      <button onClick={() => AuthInputRef.current?.focus()}>Focus</button>\n      <button onClick={() => AuthInputRef.current?.clear()}>Clear</button>\n    </div>\n  );\n}\n        `}\n        </code>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}