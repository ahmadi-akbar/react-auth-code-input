{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["propsMap","alpha","type","inputMode","pattern","alphanumeric","numeric","min","max","allowedCharacters","length","isPassword","onChange","inputsRef","useRef","inputProps","useEffect","sendResult","res","input","handleOnChange","e","target","nextElementSibling","value","handleOnKeyDown","key","handleOnFocus","handleOnPaste","pastedValue","currentInput","i","pastedCharacter","currentValue","inputs","onKeyDown","onFocus","onPaste","ref","el","maxLength","className","inputClassName","autoComplete","ariaLabel","containerClassName","App","useState","result","setResult","alt","src","href","data-ribbon","title","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c1ecf29.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\ntype Props = {\n  allowedCharacters?: 'alpha' | 'numeric' | 'alphanumeric';\n  ariaLabel?: string;\n  length?: number;\n  containerClassName?: string;\n  inputClassName?: string;\n  isPassword?: boolean;\n  onChange: (res: string) => void;\n};\n\ntype InputMode = 'text' | 'numeric';\n\ntype InputType = 'text' | 'number' | 'password';\n\ntype InputProps = {\n  type: InputType;\n  inputMode: InputMode;\n  pattern: string;\n  min?: string;\n  max?: string;\n};\n\nconst propsMap: { [key: string]: InputProps } = {\n  alpha: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z]{1}'\n  },\n\n  alphanumeric: {\n    type: 'text',\n    inputMode: 'text',\n    pattern: '[a-zA-Z0-9]{1}'\n  },\n\n  numeric: {\n    type: 'number',\n    inputMode: 'numeric',\n    pattern: '[0-9]{1}',\n    min: '0',\n    max: '9'\n  }\n};\n\nconst AuthCode: React.FC<Props> = ({\n  allowedCharacters = 'alphanumeric',\n  ariaLabel,\n  length = 6,\n  containerClassName,\n  inputClassName,\n  isPassword = false,\n  onChange\n}) => {\n  const inputsRef = useRef<Array<HTMLInputElement>>([]);\n\n  const inputProps = propsMap[allowedCharacters];\n\n  useEffect(() => {\n    inputsRef.current[0].focus();\n  }, []);\n\n  const sendResult = () => {\n    const res = inputsRef.current.map((input) => input.value).join('');\n    onChange && onChange(res);\n  };\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value, nextElementSibling }\n    } = e;\n    if (value.length > 1) {\n      e.target.value = value.charAt(0);\n      if (nextElementSibling !== null) {\n        (nextElementSibling as HTMLInputElement).focus();\n      }\n    } else {\n      if (value.match(inputProps.pattern)) {\n        if (nextElementSibling !== null) {\n          (nextElementSibling as HTMLInputElement).focus();\n        }\n      } else {\n        e.target.value = '';\n      }\n    }\n    sendResult();\n  };\n\n  const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const { key } = e;\n    const target = e.target as HTMLInputElement;\n    if (key === 'Backspace') {\n      if (target.value === '' && target.previousElementSibling !== null) {\n        if (target.previousElementSibling !== null) {\n          (target.previousElementSibling as HTMLInputElement).focus();\n          e.preventDefault();\n        }\n      } else {\n        target.value = '';\n      }\n      sendResult();\n    }\n  };\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select();\n  };\n\n  const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    const pastedValue = e.clipboardData.getData('Text');\n\n    let currentInput = 0;\n\n    for (let i = 0; i < pastedValue.length; i++) {\n      const pastedCharacter = pastedValue.charAt(i);\n      const currentValue = inputsRef.current[currentInput].value;\n      if (pastedCharacter.match(inputProps.pattern)) {\n        if (!currentValue) {\n          inputsRef.current[currentInput].value = pastedCharacter;\n          if (inputsRef.current[currentInput].nextElementSibling !== null) {\n            (inputsRef.current[currentInput]\n              .nextElementSibling as HTMLInputElement).focus();\n            currentInput++;\n          }\n        }\n      }\n    }\n    sendResult();\n\n    e.preventDefault();\n  };\n\n  const inputs = [];\n  for (let i = 0; i < length; i++) {\n    inputs.push(\n      <input\n        key={i}\n        onChange={handleOnChange}\n        onKeyDown={handleOnKeyDown}\n        onFocus={handleOnFocus}\n        onPaste={handleOnPaste}\n        {...inputProps}\n        type={isPassword ? 'password' : inputProps.type}\n        ref={(el: HTMLInputElement) => (inputsRef.current[i] = el)}\n        maxLength={1}\n        className={inputClassName}\n        autoComplete={i === 0 ? 'one-time-code' : 'off'}\n        aria-label={\n          ariaLabel\n            ? `${ariaLabel}. Character ${i + 1}.`\n            : `Character ${i + 1}.`\n        }\n      />\n    );\n  }\n\n  return <div className={containerClassName}>{inputs}</div>;\n};\n\nexport default AuthCode;\n","import React, { useState } from 'react';\n\nimport AuthCode from 'react-auth-code-input';\nimport './index.css';\n\nconst App = () => {\n  const [result, setResult] = useState<string>('');\n  const handleOnChange = (res: string) => {\n    setResult(res);\n  };\n  return (\n    <div className='main'>\n      <h1>React Auth Code Input</h1>\n      <div className='badges'>\n        <img\n          alt=''\n          src='https://img.shields.io/npm/v/react-auth-code-input.svg'\n        />\n        <img\n          alt='code style standard'\n          src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n        />\n        <img\n          alt='license MIT'\n          src='https://img.shields.io/badge/license-MIT-brightgreen.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dt/react-auth-code-input.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dw/react-auth-code-input.svg'\n        />\n      </div>\n      <p>\n        <a href='https://github.com/drac94/react-auth-code-input'>\n          View documentation on GitHub\n        </a>\n      </p>\n      <h2>Default</h2>\n      <p>\n        Try it out by writing some characters.\n        <br />\n        <br />\n        Delete and move back using the backspace.\n        <br />\n        <br />\n        You can also paste text as long as it matches the allowed characters\n        defined in the Regular Expression (By default accepts alphanumeric\n        characters).\n      </p>\n      <AuthCode onChange={handleOnChange} />\n      {result && <p>Result: {result}</p>}\n      <code>\n        {`\nimport React, { useState } from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  const [result, setResult] = useState<string>('');\n  const handleOnChange = (res: string) => {\n    setResult(res);\n  };\n  return (\n    <div>\n      <AuthCode onChange={handleOnChange} />\n      {result && <p>Result: {result}</p>}\n    </div>\n  );\n        `}\n      </code>\n      <h2>Custom Styles</h2>\n      <p>\n        Customize the look by passing CSS classes to the{' '}\n        <i>containerClassName</i> and <i>inputClassName</i> properties.\n      </p>\n      <AuthCode\n        allowedCharacters='numeric'\n        onChange={() => null}\n        length={5}\n        containerClassName='container'\n        inputClassName='input'\n      />\n      <p>index.tsx</p>\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  return (<AuthCode\n    allowedCharacters='numeric'\n    length={5}\n    containerClassName='container'\n    inputClassName='input'\n    inputType='number'\n    onChange={handleOnChange}\n  />)\n}\n        `}\n      </code>\n      <p>styles.css</p>\n      <code>\n        {`\n.container {\n  padding: 16px;\n}\n\n.input {\n  width: 2ch;\n  padding: 8px;\n  border-radius: 8px;\n  font-size: 40px;\n  text-align: center;\n  margin-right: 12px;\n  border: 1px solid white;\n  text-transform: uppercase;\n}\n        `}\n      </code>\n      <h2>Input Types</h2>\n      <p>\n        Choose between <b>numeric</b>, <b>text</b> or <b>password</b> input\n        types (Defaults to text).\n      </p>\n      <AuthCode\n        onChange={() => null}\n        length={5}\n        isPassword\n        containerClassName='container'\n        inputClassName='input'\n      />\n      <p>index.tsx</p>\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  return (<AuthCode\n    length={5}\n    isPassword\n    containerClassName='container'\n    inputClassName='input'\n    onChange={handleOnChange}\n  />)\n}\n        `}\n      </code>\n      <a\n        className='github-fork-ribbon'\n        href='https://github.com/drac94/react-auth-code-input'\n        data-ribbon='Fork me on GitHub'\n        title='Fork me on GitHub'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        Fork me on GitHub\n      </a>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}